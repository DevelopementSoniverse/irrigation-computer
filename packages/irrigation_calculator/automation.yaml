automation:
  - id: irrigation_by_radiation
    alias: "Irrigation – Radiation Trigger"
    mode: single
    trigger:
      - platform: template
        value_template: >
          {% set phase = states('input_select.tomato_phase') %}
          {% set rad = states('sensor.radiation_since_irrigation') | float(0) %}
          {% set thresholds = {
              'Planting': states('input_number.threshold_rad_phase1') | float(0),
              'Fruit Set': states('input_number.threshold_rad_phase2') | float(0),
              'Ripening':  states('input_number.threshold_rad_phase3') | float(0)
            } %}
          {{ rad >= thresholds.get(phase, 1e9) }}
    condition:
      - condition: time
        after: "07:00:00"
        before: "19:00:00"
    action:
      - service: script.irrigation_run

  - id: irrigation_relais1_power_monitor    
    alias: Monitor power consumption Relay 1    
    mode: restart
    trigger:
      # script starts / stops
      - id: start
        platform: state
        entity_id: script.irrigation_run
        to: "on"
      - id: end
        platform: state
        entity_id: script.irrigation_run
        to: "off"

    variables:
      power_entity: sensor.irrigation_relais1_power
      min_power: "{{ states('input_number.irrigation_relais1_power_min') | float(0) }}"
      max_power: "{{ states('input_number.irrigation_relais1_power_max') | float(0) }}"

    action:
      - choose:

          # ── 3 s after script start ─────────────────────
          - conditions: "{{ trigger.id == 'start' }}"
            sequence:
              - delay: "00:00:03"

              # Undercurrent check
              - choose:
                  - conditions: "{{ states(power_entity) | float(0) <= min_power }}"
                    sequence:
                      - service: persistent_notification.create
                        data:
                          title: Powerconsumption irrigation_relais1 to less
                          message: >
                            Measured power ({{ states(power_entity) | float }} W)
                            is ≤ undercurrent threshold ({{ min_power }} W).

              # Over-current check
              - choose:
                  - conditions: "{{ states(power_entity) | float(0) >= max_power }}"
                    sequence:
                      - service: persistent_notification.create
                        data:
                          title: Powerconsumption irrigation_relais1 to high
                          message: >
                            Measured power ({{ states(power_entity) | float }} W)
                            exceeds over-current threshold ({{ max_power }} W).

          # ── 2 s after script end ───────────────────────
          - conditions: "{{ trigger.id == 'end' }}"
            sequence:
              - delay: "00:00:02"
              - condition: "{{ states(power_entity) | float(0) > 0 }}"
              - service: persistent_notification.create
                data:
                  title: Powerconsumption irrigation_relais1 to high
                  message: >
                    Power after script end is
                    {{ states(power_entity) | float }} W (should be 0 W).