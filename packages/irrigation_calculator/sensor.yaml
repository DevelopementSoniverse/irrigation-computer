template:
  - sensor:
      - name: radiation_threshold_current
        unit_of_measurement: "Wh/mÂ²"
        state: >
          {% set phase = states('input_select.tomato_phase') %}
          {% if phase == 'Planting' %}
            {{ states('input_number.threshold_rad_phase1')|float(0) }}
          {% elif phase == 'Fruit Set' %}
            {{ states('input_number.threshold_rad_phase2')|float(0) }}
          {% elif phase == 'Ripening' %}
            {{ states('input_number.threshold_rad_phase3')|float(0) }}
          {% else %}0{% endif %}

  - sensor:
      - name: time_since_last_irrigation_min
        unit_of_measurement: "min"
        state_class: measurement
        state: >
          {% set ts = as_timestamp(states('input_datetime.irrigation_last_run'), 0) %}
          {% if ts > 0 %}
            {{ ((as_timestamp(now()) - ts) / 60) | round(0) }}
          {% else %} unknown {% endif %}

  - binary_sensor:
      - name: Irrigation Fallback Active
        unique_id: irrigation_fallback_active
        state: >
          {% set enabled = is_state('input_boolean.irrigation_fallback_enabled','on') %}
          {% set s = states('input_datetime.irrigation_fallback_start') %}
          {% set e = states('input_datetime.irrigation_fallback_end') %}
          {% set n = now().strftime('%H:%M:%S') %}
          {% set in_window = (s <= e and s <= n <= e) or (s > e and (n >= s or n <= e)) %}
          {{ enabled and in_window }}
        icon: mdi:clock-alert-outline

sensor:
  - platform: integration
    name: Global Radiation Energy
    source: sensor.gw3000a_solar_radiation
    unit_time: h
    method: trapezoidal
    round: 2

utility_meter:
  radiation_since_irrigation:
    name: Radiation since Irrigation
    source: sensor.global_radiation_energy