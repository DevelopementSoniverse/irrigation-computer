input_number:
  global_radiation:
    name: Global Radiation (W/m²)
    icon: mdi:white-balance-sunny
    min: 0
    max: 1200
    step: 10
    unit_of_measurement: "W/m²"

  threshold_rad_phase1:
    name: Radiation Threshold – Planting (Wh/m²)
    min: 0
    max: 200
    step: 5
    unit_of_measurement: "Wh/m²"
  threshold_rad_phase2:
    name: Radiation Threshold – Fruit Set (Wh/m²)
    min: 0
    max: 300
    step: 5
    unit_of_measurement: "Wh/m²"
  threshold_rad_phase3:
    name: Radiation Threshold – Ripening (Wh/m²)
    min: 0
    max: 250
    step: 5
    unit_of_measurement: "Wh/m²"

  watering_duration_sec:
    name: Irrigation Duration (s)
    min: 10
    max: 600
    step: 10
    unit_of_measurement: "s"

input_select:
  tomato_phase:
    name: Tomato Growth Phase
    options:
      - Planting
      - Fruit Set
      - Ripening
    initial: Planting
    icon: mdi:sprout

# Integration sensor converts instantaneous radiation (W/m²)
# into cumulative energy (Wh/m²) via trapezoidal rule.
sensor:
  - platform: integration
    name: Global Radiation Energy
    source: input_number.global_radiation
    unit_time: h        # → Wh/m²
    round: 1
    method: trapezoidal

# Utility‑meter accumulates radiation energy until reset by script.
utility_meter:
  radiation_since_irrigation:
    source: sensor.global_radiation_energy
    # No cycle specified → manual reset only.

script:
  irrigation_run:
    alias: "Irrigation Run"
    mode: single
    sequence:
      - service: switch.turn_on
        target:
          entity_id: switch.irrigation_relais1
      - delay:
          seconds: "{{ states('input_number.watering_duration_sec') | int }}"
      - service: switch.turn_off
        target:
          entity_id: switch.irrigation_relais1
      - service: utility_meter.reset
        target:
          entity_id: sensor.radiation_since_irrigation

automation:
  - id: irrigation_by_radiation
    alias: "Irrigation – Radiation Trigger"
    mode: single
    description: >
      Start irrigation when cumulative radiation exceeds the
      phase‑specific threshold and time is between 07:00 – 19:00.
    trigger:
      - platform: template
        id: radiation_reached
        value_template: >
          {% set phase = states('input_select.tomato_phase') %}
          {% set rad = states('sensor.radiation_since_irrigation') | float(0) %}
          {% set thresholds = {
              'Planting': states('input_number.threshold_rad_phase1') | float(0),
              'Fruit Set': states('input_number.threshold_rad_phase2') | float(0),
              'Ripening':  states('input_number.threshold_rad_phase3') | float(0)
            } %}
          {{ rad >= thresholds.get(phase, 1e9) }}
    condition:
      - condition: time
        after: "07:00:00"
        before: "19:00:00"
    action:
      - service: script.irrigation_run